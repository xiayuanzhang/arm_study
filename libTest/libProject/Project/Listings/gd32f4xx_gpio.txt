; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections -c --asm --interleave -o.\objects\gd32f4xx_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gd32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Firmware\GD32F4xx_standard_peripheral\Include -I..\Firmware\CMSIS -I..\Firmware\CMSIS\GD\GD32F4xx\Include -I..\User -I..\Hardware\led -I.\RTE\_LED1 -ID:\keil\ARM\PACK\GigaDevice\GD32F4xx_DFP\3.0.3\Device\F4XX\Include -ID:\keil\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DGD32F450 ..\Firmware\GD32F4xx_standard_peripheral\Source\gd32f4xx_gpio.c]
                          THUMB

                          AREA ||i.gpio_af_set||, CODE, READONLY, ALIGN=1

                  gpio_af_set PROC
;;;353    */
;;;354    void gpio_af_set(uint32_t gpio_periph, uint32_t alt_func_num, uint32_t pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;355    {
000002  4603              MOV      r3,r0
;;;356        uint16_t i;
;;;357        uint32_t afrl, afrh;
;;;358    
;;;359        afrl = GPIO_AFSEL0(gpio_periph);
000004  6a1c              LDR      r4,[r3,#0x20]
;;;360        afrh = GPIO_AFSEL1(gpio_periph);
000006  6a5d              LDR      r5,[r3,#0x24]
;;;361    
;;;362        for(i = 0U; i < 8U; i++) {
000008  2000              MOVS     r0,#0
00000a  e00d              B        |L1.40|
                  |L1.12|
;;;363            if((1U << i) & pin) {
00000c  2601              MOVS     r6,#1
00000e  4086              LSLS     r6,r6,r0
000010  4016              ANDS     r6,r6,r2
000012  b13e              CBZ      r6,|L1.36|
;;;364                /* clear the specified pin alternate function bits */
;;;365                afrl &= ~GPIO_AFR_MASK(i);
000014  0087              LSLS     r7,r0,#2
000016  260f              MOVS     r6,#0xf
000018  40be              LSLS     r6,r6,r7
00001a  43b4              BICS     r4,r4,r6
;;;366                afrl |= GPIO_AFR_SET(i, alt_func_num);
00001c  0086              LSLS     r6,r0,#2
00001e  fa01f606          LSL      r6,r1,r6
000022  4334              ORRS     r4,r4,r6
                  |L1.36|
000024  1c46              ADDS     r6,r0,#1              ;362
000026  b2b0              UXTH     r0,r6                 ;362
                  |L1.40|
000028  2808              CMP      r0,#8                 ;362
00002a  d3ef              BCC      |L1.12|
;;;367            }
;;;368        }
;;;369    
;;;370        for(i = 8U; i < 16U; i++) {
00002c  2008              MOVS     r0,#8
00002e  e011              B        |L1.84|
                  |L1.48|
;;;371            if((1U << i) & pin) {
000030  2601              MOVS     r6,#1
000032  4086              LSLS     r6,r6,r0
000034  4016              ANDS     r6,r6,r2
000036  b15e              CBZ      r6,|L1.80|
;;;372                /* clear the specified pin alternate function bits */
;;;373                afrh &= ~GPIO_AFR_MASK(i - 8U);
000038  f1a00608          SUB      r6,r0,#8
00003c  00b7              LSLS     r7,r6,#2
00003e  260f              MOVS     r6,#0xf
000040  40be              LSLS     r6,r6,r7
000042  43b5              BICS     r5,r5,r6
;;;374                afrh |= GPIO_AFR_SET(i - 8U, alt_func_num);
000044  f1a00608          SUB      r6,r0,#8
000048  00b6              LSLS     r6,r6,#2
00004a  fa01f606          LSL      r6,r1,r6
00004e  4335              ORRS     r5,r5,r6
                  |L1.80|
000050  1c46              ADDS     r6,r0,#1              ;370
000052  b2b0              UXTH     r0,r6                 ;370
                  |L1.84|
000054  2810              CMP      r0,#0x10              ;370
000056  d3eb              BCC      |L1.48|
;;;375            }
;;;376        }
;;;377    
;;;378        GPIO_AFSEL0(gpio_periph) = afrl;
000058  621c              STR      r4,[r3,#0x20]
;;;379        GPIO_AFSEL1(gpio_periph) = afrh;
00005a  625d              STR      r5,[r3,#0x24]
;;;380    }
00005c  bdf0              POP      {r4-r7,pc}
;;;381    
                          ENDP


                          AREA ||i.gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  gpio_bit_reset PROC
;;;217    */
;;;218    void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
000000  6281              STR      r1,[r0,#0x28]
;;;219    {
;;;220        GPIO_BC(gpio_periph) = (uint32_t)pin;
;;;221    }
000002  4770              BX       lr
;;;222    
                          ENDP


                          AREA ||i.gpio_bit_set||, CODE, READONLY, ALIGN=1

                  gpio_bit_set PROC
;;;201    */
;;;202    void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
000000  6181              STR      r1,[r0,#0x18]
;;;203    {
;;;204        GPIO_BOP(gpio_periph) = (uint32_t)pin;
;;;205    }
000002  4770              BX       lr
;;;206    
                          ENDP


                          AREA ||i.gpio_bit_toggle||, CODE, READONLY, ALIGN=1

                  gpio_bit_toggle PROC
;;;416    */
;;;417    void gpio_bit_toggle(uint32_t gpio_periph, uint32_t pin)
000000  62c1              STR      r1,[r0,#0x2c]
;;;418    {
;;;419        GPIO_TG(gpio_periph) = (uint32_t)pin;
;;;420    }
000002  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.gpio_bit_write||, CODE, READONLY, ALIGN=1

                  gpio_bit_write PROC
;;;236    */
;;;237    void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
000000  b10a              CBZ      r2,|L5.6|
;;;238    {
;;;239        if(RESET != bit_value) {
;;;240            GPIO_BOP(gpio_periph) = (uint32_t)pin;
000002  6181              STR      r1,[r0,#0x18]
000004  e000              B        |L5.8|
                  |L5.6|
;;;241        } else {
;;;242            GPIO_BC(gpio_periph) = (uint32_t)pin;
000006  6281              STR      r1,[r0,#0x28]
                  |L5.8|
;;;243        }
;;;244    }
000008  4770              BX       lr
;;;245    
                          ENDP


                          AREA ||i.gpio_deinit||, CODE, READONLY, ALIGN=1

                  gpio_deinit PROC
;;;47     */
;;;48     void gpio_deinit(uint32_t gpio_periph)
000000  b510              PUSH     {r4,lr}
;;;49     {
000002  4604              MOV      r4,r0
;;;50         switch(gpio_periph) {
000004  f3c40009          UBFX     r0,r4,#0,#10
000008  2800              CMP      r0,#0
00000a  d15d              BNE      |L6.200|
00000c  12a0              ASRS     r0,r4,#10
00000e  f5a01080          SUB      r0,r0,#0x100000
000012  3880              SUBS     r0,r0,#0x80
000014  2809              CMP      r0,#9
000016  d257              BCS      |L6.200|
000018  e8dff000          TBB      [pc,r0]
00001c  050e1720          DCB      0x05,0x0e,0x17,0x20
000020  29323b44          DCB      0x29,0x32,0x3b,0x44
000024  4d00              DCB      0x4d,0x00
;;;51         case GPIOA:
;;;52             /* reset GPIOA */
;;;53             rcu_periph_reset_enable(RCU_GPIOARST);
000026  f44f6080          MOV      r0,#0x400
00002a  f7fffffe          BL       rcu_periph_reset_enable
;;;54             rcu_periph_reset_disable(RCU_GPIOARST);
00002e  f44f6080          MOV      r0,#0x400
000032  f7fffffe          BL       rcu_periph_reset_disable
;;;55             break;
000036  e048              B        |L6.202|
;;;56         case GPIOB:
;;;57             /* reset GPIOB */
;;;58             rcu_periph_reset_enable(RCU_GPIOBRST);
000038  f2404001          MOV      r0,#0x401
00003c  f7fffffe          BL       rcu_periph_reset_enable
;;;59             rcu_periph_reset_disable(RCU_GPIOBRST);
000040  f2404001          MOV      r0,#0x401
000044  f7fffffe          BL       rcu_periph_reset_disable
;;;60             break;
000048  e03f              B        |L6.202|
;;;61         case GPIOC:
;;;62             /* reset GPIOC */
;;;63             rcu_periph_reset_enable(RCU_GPIOCRST);
00004a  f2404002          MOV      r0,#0x402
00004e  f7fffffe          BL       rcu_periph_reset_enable
;;;64             rcu_periph_reset_disable(RCU_GPIOCRST);
000052  f2404002          MOV      r0,#0x402
000056  f7fffffe          BL       rcu_periph_reset_disable
;;;65             break;
00005a  e036              B        |L6.202|
;;;66         case GPIOD:
;;;67             /* reset GPIOD */
;;;68             rcu_periph_reset_enable(RCU_GPIODRST);
00005c  f2404003          MOV      r0,#0x403
000060  f7fffffe          BL       rcu_periph_reset_enable
;;;69             rcu_periph_reset_disable(RCU_GPIODRST);
000064  f2404003          MOV      r0,#0x403
000068  f7fffffe          BL       rcu_periph_reset_disable
;;;70             break;
00006c  e02d              B        |L6.202|
;;;71         case GPIOE:
;;;72             /* reset GPIOE */
;;;73             rcu_periph_reset_enable(RCU_GPIOERST);
00006e  f2404004          MOV      r0,#0x404
000072  f7fffffe          BL       rcu_periph_reset_enable
;;;74             rcu_periph_reset_disable(RCU_GPIOERST);
000076  f2404004          MOV      r0,#0x404
00007a  f7fffffe          BL       rcu_periph_reset_disable
;;;75             break;
00007e  e024              B        |L6.202|
;;;76         case GPIOF:
;;;77             /* reset GPIOF */
;;;78             rcu_periph_reset_enable(RCU_GPIOFRST);
000080  f2404005          MOV      r0,#0x405
000084  f7fffffe          BL       rcu_periph_reset_enable
;;;79             rcu_periph_reset_disable(RCU_GPIOFRST);
000088  f2404005          MOV      r0,#0x405
00008c  f7fffffe          BL       rcu_periph_reset_disable
;;;80             break;
000090  e01b              B        |L6.202|
;;;81         case GPIOG:
;;;82             /* reset GPIOG */
;;;83             rcu_periph_reset_enable(RCU_GPIOGRST);
000092  f2404006          MOV      r0,#0x406
000096  f7fffffe          BL       rcu_periph_reset_enable
;;;84             rcu_periph_reset_disable(RCU_GPIOGRST);
00009a  f2404006          MOV      r0,#0x406
00009e  f7fffffe          BL       rcu_periph_reset_disable
;;;85             break;
0000a2  e012              B        |L6.202|
;;;86         case GPIOH:
;;;87             /* reset GPIOH */
;;;88             rcu_periph_reset_enable(RCU_GPIOHRST);
0000a4  f2404007          MOV      r0,#0x407
0000a8  f7fffffe          BL       rcu_periph_reset_enable
;;;89             rcu_periph_reset_disable(RCU_GPIOHRST);
0000ac  f2404007          MOV      r0,#0x407
0000b0  f7fffffe          BL       rcu_periph_reset_disable
;;;90             break;
0000b4  e009              B        |L6.202|
;;;91         case GPIOI:
;;;92             /* reset GPIOI */
;;;93             rcu_periph_reset_enable(RCU_GPIOIRST);
0000b6  f44f6081          MOV      r0,#0x408
0000ba  f7fffffe          BL       rcu_periph_reset_enable
;;;94             rcu_periph_reset_disable(RCU_GPIOIRST);
0000be  f44f6081          MOV      r0,#0x408
0000c2  f7fffffe          BL       rcu_periph_reset_disable
;;;95             break;
0000c6  e000              B        |L6.202|
                  |L6.200|
;;;96         default:
;;;97             break;
0000c8  bf00              NOP      
                  |L6.202|
0000ca  bf00              NOP                            ;55
;;;98         }
;;;99     }
0000cc  bd10              POP      {r4,pc}
;;;100    
                          ENDP


                          AREA ||i.gpio_input_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_input_bit_get PROC
;;;270    */
;;;271    FlagStatus gpio_input_bit_get(uint32_t gpio_periph, uint32_t pin)
000000  4602              MOV      r2,r0
;;;272    {
;;;273        if((uint32_t)RESET != (GPIO_ISTAT(gpio_periph) & (pin))) {
000002  6910              LDR      r0,[r2,#0x10]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L7.12|
;;;274            return SET;
000008  2001              MOVS     r0,#1
                  |L7.10|
;;;275        } else {
;;;276            return RESET;
;;;277        }
;;;278    }
00000a  4770              BX       lr
                  |L7.12|
00000c  2000              MOVS     r0,#0                 ;276
00000e  e7fc              B        |L7.10|
;;;279    
                          ENDP


                          AREA ||i.gpio_input_port_get||, CODE, READONLY, ALIGN=1

                  gpio_input_port_get PROC
;;;287    */
;;;288    uint16_t gpio_input_port_get(uint32_t gpio_periph)
000000  4601              MOV      r1,r0
;;;289    {
;;;290        return ((uint16_t)GPIO_ISTAT(gpio_periph));
000002  6908              LDR      r0,[r1,#0x10]
000004  b280              UXTH     r0,r0
;;;291    }
000006  4770              BX       lr
;;;292    
                          ENDP


                          AREA ||i.gpio_mode_set||, CODE, READONLY, ALIGN=1

                  gpio_mode_set PROC
;;;120    */
;;;121    void gpio_mode_set(uint32_t gpio_periph, uint32_t mode, uint32_t pull_up_down, uint32_t pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;122    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;123        uint16_t i;
;;;124        uint32_t ctl, pupd;
;;;125    
;;;126        ctl = GPIO_CTL(gpio_periph);
000008  6821              LDR      r1,[r4,#0]
;;;127        pupd = GPIO_PUD(gpio_periph);
00000a  68e2              LDR      r2,[r4,#0xc]
;;;128    
;;;129        for(i = 0U; i < 16U; i++) {
00000c  2000              MOVS     r0,#0
00000e  e019              B        |L9.68|
                  |L9.16|
;;;130            if((1U << i) & pin) {
000010  2701              MOVS     r7,#1
000012  4087              LSLS     r7,r7,r0
000014  401f              ANDS     r7,r7,r3
000016  b19f              CBZ      r7,|L9.64|
;;;131                /* clear the specified pin mode bits */
;;;132                ctl &= ~GPIO_MODE_MASK(i);
000018  ea4f0c40          LSL      r12,r0,#1
00001c  2703              MOVS     r7,#3
00001e  fa07f70c          LSL      r7,r7,r12
000022  43b9              BICS     r1,r1,r7
;;;133                /* set the specified pin mode bits */
;;;134                ctl |= GPIO_MODE_SET(i, mode);
000024  0047              LSLS     r7,r0,#1
000026  fa05f707          LSL      r7,r5,r7
00002a  4339              ORRS     r1,r1,r7
;;;135    
;;;136                /* clear the specified pin pupd bits */
;;;137                pupd &= ~GPIO_PUPD_MASK(i);
00002c  ea4f0c40          LSL      r12,r0,#1
000030  2703              MOVS     r7,#3
000032  fa07f70c          LSL      r7,r7,r12
000036  43ba              BICS     r2,r2,r7
;;;138                /* set the specified pin pupd bits */
;;;139                pupd |= GPIO_PUPD_SET(i, pull_up_down);
000038  0047              LSLS     r7,r0,#1
00003a  fa06f707          LSL      r7,r6,r7
00003e  433a              ORRS     r2,r2,r7
                  |L9.64|
000040  1c47              ADDS     r7,r0,#1              ;129
000042  b2b8              UXTH     r0,r7                 ;129
                  |L9.68|
000044  2810              CMP      r0,#0x10              ;129
000046  d3e3              BCC      |L9.16|
;;;140            }
;;;141        }
;;;142    
;;;143        GPIO_CTL(gpio_periph) = ctl;
000048  6021              STR      r1,[r4,#0]
;;;144        GPIO_PUD(gpio_periph) = pupd;
00004a  60e2              STR      r2,[r4,#0xc]
;;;145    }
00004c  bdf0              POP      {r4-r7,pc}
;;;146    
                          ENDP


                          AREA ||i.gpio_output_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_output_bit_get PROC
;;;303    */
;;;304    FlagStatus gpio_output_bit_get(uint32_t gpio_periph, uint32_t pin)
000000  4602              MOV      r2,r0
;;;305    {
;;;306        if((uint32_t)RESET != (GPIO_OCTL(gpio_periph) & (pin))) {
000002  6950              LDR      r0,[r2,#0x14]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L10.12|
;;;307            return SET;
000008  2001              MOVS     r0,#1
                  |L10.10|
;;;308        } else {
;;;309            return RESET;
;;;310        }
;;;311    }
00000a  4770              BX       lr
                  |L10.12|
00000c  2000              MOVS     r0,#0                 ;309
00000e  e7fc              B        |L10.10|
;;;312    
                          ENDP


                          AREA ||i.gpio_output_options_set||, CODE, READONLY, ALIGN=1

                  gpio_output_options_set PROC
;;;165    */
;;;166    void gpio_output_options_set(uint32_t gpio_periph, uint8_t otype, uint32_t speed, uint32_t pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;167    {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;168        uint16_t i;
;;;169        uint32_t ospeedr;
;;;170    
;;;171        if(GPIO_OTYPE_OD == otype) {
000006  2c01              CMP      r4,#1
000008  d103              BNE      |L11.18|
;;;172            GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
00000a  6846              LDR      r6,[r0,#4]
00000c  431e              ORRS     r6,r6,r3
00000e  6046              STR      r6,[r0,#4]
000010  e002              B        |L11.24|
                  |L11.18|
;;;173        } else {
;;;174            GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
000012  6846              LDR      r6,[r0,#4]
000014  439e              BICS     r6,r6,r3
000016  6046              STR      r6,[r0,#4]
                  |L11.24|
;;;175        }
;;;176    
;;;177        /* get the specified pin output speed bits value */
;;;178        ospeedr = GPIO_OSPD(gpio_periph);
000018  6882              LDR      r2,[r0,#8]
;;;179    
;;;180        for(i = 0U; i < 16U; i++) {
00001a  2100              MOVS     r1,#0
00001c  e00d              B        |L11.58|
                  |L11.30|
;;;181            if((1U << i) & pin) {
00001e  2601              MOVS     r6,#1
000020  408e              LSLS     r6,r6,r1
000022  401e              ANDS     r6,r6,r3
000024  b13e              CBZ      r6,|L11.54|
;;;182                /* clear the specified pin output speed bits */
;;;183                ospeedr &= ~GPIO_OSPEED_MASK(i);
000026  004f              LSLS     r7,r1,#1
000028  2603              MOVS     r6,#3
00002a  40be              LSLS     r6,r6,r7
00002c  43b2              BICS     r2,r2,r6
;;;184                /* set the specified pin output speed bits */
;;;185                ospeedr |= GPIO_OSPEED_SET(i, speed);
00002e  004e              LSLS     r6,r1,#1
000030  fa05f606          LSL      r6,r5,r6
000034  4332              ORRS     r2,r2,r6
                  |L11.54|
000036  1c4e              ADDS     r6,r1,#1              ;180
000038  b2b1              UXTH     r1,r6                 ;180
                  |L11.58|
00003a  2910              CMP      r1,#0x10              ;180
00003c  d3ef              BCC      |L11.30|
;;;186            }
;;;187        }
;;;188        GPIO_OSPD(gpio_periph) = ospeedr;
00003e  6082              STR      r2,[r0,#8]
;;;189    }
000040  bdf0              POP      {r4-r7,pc}
;;;190    
                          ENDP


                          AREA ||i.gpio_output_port_get||, CODE, READONLY, ALIGN=1

                  gpio_output_port_get PROC
;;;320    */
;;;321    uint16_t gpio_output_port_get(uint32_t gpio_periph)
000000  4601              MOV      r1,r0
;;;322    {
;;;323        return ((uint16_t)GPIO_OCTL(gpio_periph));
000002  6948              LDR      r0,[r1,#0x14]
000004  b280              UXTH     r0,r0
;;;324    }
000006  4770              BX       lr
;;;325    
                          ENDP


                          AREA ||i.gpio_pin_lock||, CODE, READONLY, ALIGN=1

                  gpio_pin_lock PROC
;;;392    */
;;;393    void gpio_pin_lock(uint32_t gpio_periph, uint32_t pin)
000000  f44f3280          MOV      r2,#0x10000
;;;394    {
;;;395        uint32_t lock = 0x00010000U;
;;;396        lock |= pin;
000004  430a              ORRS     r2,r2,r1
;;;397    
;;;398        /* lock key writing sequence: write 1->write 0->write 1->read 0->read 1 */
;;;399        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
000006  61c2              STR      r2,[r0,#0x1c]
;;;400        GPIO_LOCK(gpio_periph) = (uint32_t)pin;
000008  61c1              STR      r1,[r0,#0x1c]
;;;401        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
00000a  61c2              STR      r2,[r0,#0x1c]
;;;402        lock = GPIO_LOCK(gpio_periph);
00000c  69c2              LDR      r2,[r0,#0x1c]
;;;403        lock = GPIO_LOCK(gpio_periph);
00000e  69c2              LDR      r2,[r0,#0x1c]
;;;404    }
000010  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.gpio_port_toggle||, CODE, READONLY, ALIGN=1

                  gpio_port_toggle PROC
;;;430    */
;;;431    void gpio_port_toggle(uint32_t gpio_periph)
000000  f64f71ff          MOV      r1,#0xffff
;;;432    {
;;;433        GPIO_TG(gpio_periph) = 0x0000FFFFU;
000004  62c1              STR      r1,[r0,#0x2c]
;;;434    }
000006  4770              BX       lr
                          ENDP


                          AREA ||i.gpio_port_write||, CODE, READONLY, ALIGN=1

                  gpio_port_write PROC
;;;254    */
;;;255    void gpio_port_write(uint32_t gpio_periph, uint16_t data)
000000  6141              STR      r1,[r0,#0x14]
;;;256    {
;;;257        GPIO_OCTL(gpio_periph) = (uint32_t)data;
;;;258    }
000002  4770              BX       lr
;;;259    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Firmware\\GD32F4xx_standard_peripheral\\Source\\gd32f4xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f4xx_gpio_c_ed302560____REV16|
#line 114 "..\\Firmware\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f4xx_gpio_c_ed302560____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f4xx_gpio_c_ed302560____REVSH|
#line 128
|__asm___15_gd32f4xx_gpio_c_ed302560____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
