; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections -c --asm --interleave -o.\objects\gd32f4xx_rcu.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gd32f4xx_rcu.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Firmware\GD32F4xx_standard_peripheral\Include -I..\Firmware\CMSIS -I..\Firmware\CMSIS\GD\GD32F4xx\Include -I..\User -I..\Hardware\led -I.\RTE\_LED1 -ID:\keil\ARM\PACK\GigaDevice\GD32F4xx_DFP\3.0.3\Device\F4XX\Include -ID:\keil\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DGD32F450 ..\Firmware\GD32F4xx_standard_peripheral\Source\gd32f4xx_rcu.c]
                          THUMB

                          AREA ||i.rcu_ahb_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_ahb_clock_config PROC
;;;404    */
;;;405    void rcu_ahb_clock_config(uint32_t ck_ahb)
000000  4a04              LDR      r2,|L1.20|
;;;406    {
;;;407        uint32_t reg;
;;;408    
;;;409        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;410        /* reset the AHBPSC bits and set according to ck_ahb */
;;;411        reg &= ~RCU_CFG0_AHBPSC;
000004  f02101f0          BIC      r1,r1,#0xf0
;;;412        RCU_CFG0 = (reg | ck_ahb);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L1.20|
00000e  601a              STR      r2,[r3,#0]
;;;413    }
000010  4770              BX       lr
;;;414    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40023808

                          AREA ||i.rcu_all_reset_flag_clear||, CODE, READONLY, ALIGN=2

                  rcu_all_reset_flag_clear PROC
;;;778    */
;;;779    void rcu_all_reset_flag_clear(void)
000000  4803              LDR      r0,|L2.16|
;;;780    {
;;;781        RCU_RSTSCK |= RCU_RSTSCK_RSTFC;
000002  6800              LDR      r0,[r0,#0]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;782    }
00000c  4770              BX       lr
;;;783    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40023874

                          AREA ||i.rcu_apb1_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_apb1_clock_config PROC
;;;426    */
;;;427    void rcu_apb1_clock_config(uint32_t ck_apb1)
000000  4a04              LDR      r2,|L3.20|
;;;428    {
;;;429        uint32_t reg;
;;;430    
;;;431        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;432        /* reset the APB1PSC and set according to ck_apb1 */
;;;433        reg &= ~RCU_CFG0_APB1PSC;
000004  f42151e0          BIC      r1,r1,#0x1c00
;;;434        RCU_CFG0 = (reg | ck_apb1);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L3.20|
00000e  601a              STR      r2,[r3,#0]
;;;435    }
000010  4770              BX       lr
;;;436    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40023808

                          AREA ||i.rcu_apb2_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_apb2_clock_config PROC
;;;448    */
;;;449    void rcu_apb2_clock_config(uint32_t ck_apb2)
000000  4a04              LDR      r2,|L4.20|
;;;450    {
;;;451        uint32_t reg;
;;;452    
;;;453        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;454        /* reset the APB2PSC and set according to ck_apb2 */
;;;455        reg &= ~RCU_CFG0_APB2PSC;
000004  f4214160          BIC      r1,r1,#0xe000
;;;456        RCU_CFG0 = (reg | ck_apb2);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L4.20|
00000e  601a              STR      r2,[r3,#0]
;;;457    }
000010  4770              BX       lr
;;;458    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40023808

                          AREA ||i.rcu_bkp_reset_disable||, CODE, READONLY, ALIGN=2

                  rcu_bkp_reset_disable PROC
;;;357    */
;;;358    void rcu_bkp_reset_disable(void)
000000  4803              LDR      r0,|L5.16|
;;;359    {
;;;360        RCU_BDCTL &= ~RCU_BDCTL_BKPRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4203080          BIC      r0,r0,#0x10000
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;361    }
00000c  4770              BX       lr
;;;362    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40023870

                          AREA ||i.rcu_bkp_reset_enable||, CODE, READONLY, ALIGN=2

                  rcu_bkp_reset_enable PROC
;;;346    */
;;;347    void rcu_bkp_reset_enable(void)
000000  4803              LDR      r0,|L6.16|
;;;348    {
;;;349        RCU_BDCTL |= RCU_BDCTL_BKPRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4403080          ORR      r0,r0,#0x10000
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;350    }
00000c  4770              BX       lr
;;;351    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40023870

                          AREA ||i.rcu_ck48m_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_ck48m_clock_config PROC
;;;668    */
;;;669    void rcu_ck48m_clock_config(uint32_t ck48m_clock_source)
000000  4a04              LDR      r2,|L7.20|
;;;670    {
;;;671        uint32_t reg;
;;;672    
;;;673        reg = RCU_ADDCTL;
000002  6811              LDR      r1,[r2,#0]
;;;674        /* reset the CK48MSEL bit and set according to i2s_clock_source */
;;;675        reg &= ~RCU_ADDCTL_CK48MSEL;
000004  f0210101          BIC      r1,r1,#1
;;;676        RCU_ADDCTL = (reg | ck48m_clock_source);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L7.20|
00000e  601a              STR      r2,[r3,#0]
;;;677    }
000010  4770              BX       lr
;;;678    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x400238c0

                          AREA ||i.rcu_ckout0_config||, CODE, READONLY, ALIGN=2

                  rcu_ckout0_config PROC
;;;471    */
;;;472    void rcu_ckout0_config(uint32_t ckout0_src, uint32_t ckout0_div)
000000  b510              PUSH     {r4,lr}
;;;473    {
;;;474        uint32_t reg;
;;;475    
;;;476        reg = RCU_CFG0;
000002  4b05              LDR      r3,|L8.24|
000004  681a              LDR      r2,[r3,#0]
;;;477        /* reset the CKOUT0SRC, CKOUT0DIV and set according to ckout0_src and ckout0_div */
;;;478        reg &= ~(RCU_CFG0_CKOUT0SEL | RCU_CFG0_CKOUT0DIV);
000006  f02262ec          BIC      r2,r2,#0x7600000
;;;479        RCU_CFG0 = (reg | ckout0_src | ckout0_div);
00000a  ea420300          ORR      r3,r2,r0
00000e  430b              ORRS     r3,r3,r1
000010  4c01              LDR      r4,|L8.24|
000012  6023              STR      r3,[r4,#0]
;;;480    }
000014  bd10              POP      {r4,pc}
;;;481    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40023808

                          AREA ||i.rcu_ckout1_config||, CODE, READONLY, ALIGN=2

                  rcu_ckout1_config PROC
;;;494    */
;;;495    void rcu_ckout1_config(uint32_t ckout1_src, uint32_t ckout1_div)
000000  b510              PUSH     {r4,lr}
;;;496    {
;;;497        uint32_t reg;
;;;498    
;;;499        reg = RCU_CFG0;
000002  4b05              LDR      r3,|L9.24|
000004  681a              LDR      r2,[r3,#0]
;;;500        /* reset the CKOUT1SRC, CKOUT1DIV and set according to ckout1_src and ckout1_div */
;;;501        reg &= ~(RCU_CFG0_CKOUT1SEL | RCU_CFG0_CKOUT1DIV);
000006  f0224278          BIC      r2,r2,#0xf8000000
;;;502        RCU_CFG0 = (reg | ckout1_src | ckout1_div);
00000a  ea420300          ORR      r3,r2,r0
00000e  430b              ORRS     r3,r3,r1
000010  4c01              LDR      r4,|L9.24|
000012  6023              STR      r3,[r4,#0]
;;;503    }
000014  bd10              POP      {r4,pc}
;;;504    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40023808

                          AREA ||i.rcu_clock_freq_get||, CODE, READONLY, ALIGN=2

                  rcu_clock_freq_get PROC
;;;1257   */
;;;1258   uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1259   {
000004  b08c              SUB      sp,sp,#0x30
000006  4606              MOV      r6,r0
;;;1260       uint32_t sws, ck_freq = 0U;
000008  2000              MOVS     r0,#0
00000a  900a              STR      r0,[sp,#0x28]
;;;1261       uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
;;;1262       uint32_t pllpsc, plln, pllsel, pllp, ck_src, idx, clk_exp;
;;;1263   
;;;1264       /* exponent of AHB, APB1 and APB2 clock divider */
;;;1265       const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
00000c  a03e              ADR      r0,|L10.264|
00000e  e8904c00          LDM      r0,{r10,r11,lr}
000012  68c0              LDR      r0,[r0,#0xc]
000014  e9cdbe05          STRD     r11,lr,[sp,#0x14]
000018  f8cda010          STR      r10,[sp,#0x10]
00001c  9007              STR      r0,[sp,#0x1c]
;;;1266       const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
00001e  f20f0aec          ADR      r10,|L10.268|
000022  e9da0a00          LDRD     r0,r10,[r10,#0]
000026  e9cd0a02          STRD     r0,r10,[sp,#8]
;;;1267       const uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
00002a  f20f0ae0          ADR      r10,|L10.268|
00002e  e9da0a00          LDRD     r0,r10,[r10,#0]
000032  e9cd0a00          STRD     r0,r10,[sp,#0]
;;;1268   
;;;1269       sws = GET_BITS(RCU_CFG0, 2, 3);
000036  4838              LDR      r0,|L10.280|
000038  6800              LDR      r0,[r0,#0]
00003a  f3c00081          UBFX     r0,r0,#2,#2
00003e  900b              STR      r0,[sp,#0x2c]
;;;1270       switch(sws) {
000040  980b              LDR      r0,[sp,#0x2c]
000042  b120              CBZ      r0,|L10.78|
000044  2801              CMP      r0,#1
000046  d004              BEQ      |L10.82|
000048  2802              CMP      r0,#2
00004a  d128              BNE      |L10.158|
00004c  e003              B        |L10.86|
                  |L10.78|
;;;1271       /* IRC16M is selected as CK_SYS */
;;;1272       case SEL_IRC16M:
;;;1273           cksys_freq = IRC16M_VALUE;
00004e  4933              LDR      r1,|L10.284|
;;;1274           break;
000050  e027              B        |L10.162|
                  |L10.82|
;;;1275       /* HXTAL is selected as CK_SYS */
;;;1276       case SEL_HXTAL:
;;;1277           cksys_freq = HXTAL_VALUE;
000052  4933              LDR      r1,|L10.288|
;;;1278           break;
000054  e025              B        |L10.162|
                  |L10.86|
;;;1279       /* PLLP is selected as CK_SYS */
;;;1280       case SEL_PLLP:
;;;1281           /* get the value of PLLPSC[5:0] */
;;;1282           pllpsc = GET_BITS(RCU_PLL, 0U, 5U);
000056  4830              LDR      r0,|L10.280|
000058  1f00              SUBS     r0,r0,#4
00005a  6800              LDR      r0,[r0,#0]
00005c  f000073f          AND      r7,r0,#0x3f
;;;1283           plln = GET_BITS(RCU_PLL, 6U, 14U);
000060  482d              LDR      r0,|L10.280|
000062  1f00              SUBS     r0,r0,#4
000064  6800              LDR      r0,[r0,#0]
000066  f3c01c88          UBFX     r12,r0,#6,#9
;;;1284           pllp = (GET_BITS(RCU_PLL, 16U, 17U) + 1U) * 2U;
00006a  482b              LDR      r0,|L10.280|
00006c  1f00              SUBS     r0,r0,#4
00006e  6800              LDR      r0,[r0,#0]
000070  f3c04001          UBFX     r0,r0,#16,#2
000074  1c40              ADDS     r0,r0,#1
000076  ea4f0940          LSL      r9,r0,#1
;;;1285           /* PLL clock source selection, HXTAL or IRC16M/2 */
;;;1286           pllsel = (RCU_PLL & RCU_PLL_PLLSEL);
00007a  4827              LDR      r0,|L10.280|
00007c  1f00              SUBS     r0,r0,#4
00007e  6800              LDR      r0,[r0,#0]
000080  f4000880          AND      r8,r0,#0x400000
;;;1287           if(RCU_PLLSRC_HXTAL == pllsel) {
000084  f5b80f80          CMP      r8,#0x400000
000088  d101              BNE      |L10.142|
;;;1288               ck_src = HXTAL_VALUE;
00008a  4b25              LDR      r3,|L10.288|
00008c  e000              B        |L10.144|
                  |L10.142|
;;;1289           } else {
;;;1290               ck_src = IRC16M_VALUE;
00008e  4b23              LDR      r3,|L10.284|
                  |L10.144|
;;;1291           }
;;;1292           cksys_freq = ((ck_src / pllpsc) * plln) / pllp;
000090  fbb3f0f7          UDIV     r0,r3,r7
000094  fb00f00c          MUL      r0,r0,r12
000098  fbb0f1f9          UDIV     r1,r0,r9
;;;1293           break;
00009c  e001              B        |L10.162|
                  |L10.158|
;;;1294       /* IRC16M is selected as CK_SYS */
;;;1295       default:
;;;1296           cksys_freq = IRC16M_VALUE;
00009e  491f              LDR      r1,|L10.284|
;;;1297           break;
0000a0  bf00              NOP      
                  |L10.162|
0000a2  bf00              NOP                            ;1274
;;;1298       }
;;;1299       /* calculate AHB clock frequency */
;;;1300       idx = GET_BITS(RCU_CFG0, 4, 7);
0000a4  481c              LDR      r0,|L10.280|
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f3c01403          UBFX     r4,r0,#4,#4
;;;1301       clk_exp = ahb_exp[idx];
0000ac  a804              ADD      r0,sp,#0x10
0000ae  5d05              LDRB     r5,[r0,r4]
;;;1302       ahb_freq = cksys_freq >> clk_exp;
0000b0  fa21f205          LSR      r2,r1,r5
;;;1303   
;;;1304       /* calculate APB1 clock frequency */
;;;1305       idx = GET_BITS(RCU_CFG0, 10, 12);
0000b4  4818              LDR      r0,|L10.280|
0000b6  6800              LDR      r0,[r0,#0]
0000b8  f3c02482          UBFX     r4,r0,#10,#3
;;;1306       clk_exp = apb1_exp[idx];
0000bc  a802              ADD      r0,sp,#8
0000be  5d05              LDRB     r5,[r0,r4]
;;;1307       apb1_freq = ahb_freq >> clk_exp;
0000c0  fa22f005          LSR      r0,r2,r5
0000c4  9009              STR      r0,[sp,#0x24]
;;;1308   
;;;1309       /* calculate APB2 clock frequency */
;;;1310       idx = GET_BITS(RCU_CFG0, 13, 15);
0000c6  4814              LDR      r0,|L10.280|
0000c8  6800              LDR      r0,[r0,#0]
0000ca  f3c03442          UBFX     r4,r0,#13,#3
;;;1311       clk_exp = apb2_exp[idx];
0000ce  f81d5004          LDRB     r5,[sp,r4]
;;;1312       apb2_freq = ahb_freq >> clk_exp;
0000d2  fa22f005          LSR      r0,r2,r5
0000d6  9008              STR      r0,[sp,#0x20]
;;;1313   
;;;1314       /* return the clocks frequency */
;;;1315       switch(clock) {
0000d8  b136              CBZ      r6,|L10.232|
0000da  2e01              CMP      r6,#1
0000dc  d006              BEQ      |L10.236|
0000de  2e02              CMP      r6,#2
0000e0  d006              BEQ      |L10.240|
0000e2  2e03              CMP      r6,#3
0000e4  d10a              BNE      |L10.252|
0000e6  e006              B        |L10.246|
                  |L10.232|
;;;1316       case CK_SYS:
;;;1317           ck_freq = cksys_freq;
0000e8  910a              STR      r1,[sp,#0x28]
;;;1318           break;
0000ea  e008              B        |L10.254|
                  |L10.236|
;;;1319       case CK_AHB:
;;;1320           ck_freq = ahb_freq;
0000ec  920a              STR      r2,[sp,#0x28]
;;;1321           break;
0000ee  e006              B        |L10.254|
                  |L10.240|
;;;1322       case CK_APB1:
;;;1323           ck_freq = apb1_freq;
0000f0  9809              LDR      r0,[sp,#0x24]
0000f2  900a              STR      r0,[sp,#0x28]
;;;1324           break;
0000f4  e003              B        |L10.254|
                  |L10.246|
;;;1325       case CK_APB2:
;;;1326           ck_freq = apb2_freq;
0000f6  9808              LDR      r0,[sp,#0x20]
0000f8  900a              STR      r0,[sp,#0x28]
;;;1327           break;
0000fa  e000              B        |L10.254|
                  |L10.252|
;;;1328       default:
;;;1329           break;
0000fc  bf00              NOP      
                  |L10.254|
0000fe  bf00              NOP                            ;1318
;;;1330       }
;;;1331       return ck_freq;
000100  980a              LDR      r0,[sp,#0x28]
;;;1332   }
000102  b00c              ADD      sp,sp,#0x30
000104  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L10.264|
000108  00                DCB      0
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L10.268|
00010c  00                DCB      0
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  01020304          DCB      1,2,3,4,6,"\a\b\t"
000114  06070809
                  |L10.280|
                          DCD      0x40023808
                  |L10.284|
                          DCD      0x00f42400
                  |L10.288|
                          DCD      0x017d7840

                          AREA ||i.rcu_deepsleep_voltage_set||, CODE, READONLY, ALIGN=2

                  rcu_deepsleep_voltage_set PROC
;;;1196   */
;;;1197   void rcu_deepsleep_voltage_set(uint32_t dsvol)
000000  f0000007          AND      r0,r0,#7
;;;1198   {
;;;1199       dsvol &= RCU_DSV_DSLPVS;
;;;1200       RCU_DSV = dsvol;
000004  4901              LDR      r1,|L11.12|
000006  6008              STR      r0,[r1,#0]
;;;1201   }
000008  4770              BX       lr
;;;1202   
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0x40023934

                          AREA ||i.rcu_deinit||, CODE, READONLY, ALIGN=2

                  rcu_deinit PROC
;;;57     */
;;;58     void rcu_deinit(void)
000000  b500              PUSH     {lr}
;;;59     {
;;;60         /* enable IRC16M */
;;;61         RCU_CTL |= RCU_CTL_IRC16MEN;
000002  481e              LDR      r0,|L12.124|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  491c              LDR      r1,|L12.124|
00000c  6008              STR      r0,[r1,#0]
;;;62         rcu_osci_stab_wait(RCU_IRC16M);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       rcu_osci_stab_wait
;;;63         RCU_CFG0 &= ~RCU_CFG0_SCS;
000014  4819              LDR      r0,|L12.124|
000016  3008              ADDS     r0,r0,#8
000018  6800              LDR      r0,[r0,#0]
00001a  f0200003          BIC      r0,r0,#3
00001e  4917              LDR      r1,|L12.124|
000020  3108              ADDS     r1,r1,#8
000022  6008              STR      r0,[r1,#0]
;;;64     
;;;65         /* reset CTL register */
;;;66         RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN | RCU_CTL_PLLI2SEN
000024  4815              LDR      r0,|L12.124|
000026  6800              LDR      r0,[r0,#0]
000028  4915              LDR      r1,|L12.128|
00002a  4008              ANDS     r0,r0,r1
00002c  4913              LDR      r1,|L12.124|
00002e  6008              STR      r0,[r1,#0]
;;;67                      | RCU_CTL_PLLSAIEN);
;;;68         RCU_CTL &= ~(RCU_CTL_HXTALBPS);
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]
000034  f4202080          BIC      r0,r0,#0x40000
000038  6008              STR      r0,[r1,#0]
;;;69         /* reset CFG0 register */
;;;70         RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
00003a  4810              LDR      r0,|L12.124|
00003c  3008              ADDS     r0,r0,#8
00003e  6800              LDR      r0,[r0,#0]
000040  f4007043          AND      r0,r0,#0x30c
000044  490d              LDR      r1,|L12.124|
000046  3108              ADDS     r1,r1,#8
000048  6008              STR      r0,[r1,#0]
;;;71                       RCU_CFG0_RTCDIV | RCU_CFG0_CKOUT0SEL | RCU_CFG0_I2SSEL | RCU_CFG0_CKOUT0DIV |
;;;72                       RCU_CFG0_CKOUT1DIV | RCU_CFG0_CKOUT1SEL);
;;;73         /* reset PLL register */
;;;74         RCU_PLL = 0x24003010U;
00004a  480e              LDR      r0,|L12.132|
00004c  1f09              SUBS     r1,r1,#4
00004e  6008              STR      r0,[r1,#0]
;;;75         /* reset PLLI2S register */
;;;76         RCU_PLLI2S = 0x24003000U;
000050  480c              LDR      r0,|L12.132|
000052  3810              SUBS     r0,r0,#0x10
000054  4909              LDR      r1,|L12.124|
000056  3184              ADDS     r1,r1,#0x84
000058  6008              STR      r0,[r1,#0]
;;;77         /* reset PLLSAI register */
;;;78         RCU_PLLSAI = 0x24003010U;
00005a  480a              LDR      r0,|L12.132|
00005c  1d09              ADDS     r1,r1,#4
00005e  6008              STR      r0,[r1,#0]
;;;79         /* reset INT register */
;;;80         RCU_INT = 0x00000000U;
000060  2000              MOVS     r0,#0
000062  4906              LDR      r1,|L12.124|
000064  310c              ADDS     r1,r1,#0xc
000066  6008              STR      r0,[r1,#0]
;;;81         /* reset CFG1 register */
;;;82         RCU_CFG1 &= ~(RCU_CFG1_PLLSAIRDIV | RCU_CFG1_TIMERSEL);
000068  4804              LDR      r0,|L12.124|
00006a  308c              ADDS     r0,r0,#0x8c
00006c  6800              LDR      r0,[r0,#0]
00006e  4906              LDR      r1,|L12.136|
000070  4008              ANDS     r0,r0,r1
000072  4902              LDR      r1,|L12.124|
000074  318c              ADDS     r1,r1,#0x8c
000076  6008              STR      r0,[r1,#0]
;;;83     }
000078  bd00              POP      {pc}
;;;84     
                          ENDP

00007a  0000              DCW      0x0000
                  |L12.124|
                          DCD      0x40023800
                  |L12.128|
                          DCD      0xeaf6ffff
                  |L12.132|
                          DCD      0x24003010
                  |L12.136|
                          DCD      0xfefcffff

                          AREA ||i.rcu_flag_get||, CODE, READONLY, ALIGN=2

                  rcu_flag_get PROC
;;;762    */
;;;763    FlagStatus rcu_flag_get(rcu_flag_enum flag)
000000  4601              MOV      r1,r0
;;;764    {
;;;765        /* get the rcu flag */
;;;766        if(RESET != (RCU_REG_VAL(flag) & BIT(RCU_BIT_POS(flag)))) {
000002  4a07              LDR      r2,|L13.32|
000004  eb021091          ADD      r0,r2,r1,LSR #6
000008  f8d00800          LDR      r0,[r0,#0x800]
00000c  f001031f          AND      r3,r1,#0x1f
000010  2201              MOVS     r2,#1
000012  409a              LSLS     r2,r2,r3
000014  4010              ANDS     r0,r0,r2
000016  b108              CBZ      r0,|L13.28|
;;;767            return SET;
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;768        } else {
;;;769            return RESET;
;;;770        }
;;;771    }
00001a  4770              BX       lr
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;769
00001e  e7fc              B        |L13.26|
;;;772    
                          ENDP

                  |L13.32|
                          DCD      0x40023000

                          AREA ||i.rcu_hxtal_clock_monitor_disable||, CODE, READONLY, ALIGN=2

                  rcu_hxtal_clock_monitor_disable PROC
;;;1152   */
;;;1153   void rcu_hxtal_clock_monitor_disable(void)
000000  4803              LDR      r0,|L14.16|
;;;1154   {
;;;1155       RCU_CTL &= ~RCU_CTL_CKMEN;
000002  6800              LDR      r0,[r0,#0]
000004  f4202000          BIC      r0,r0,#0x80000
000008  4901              LDR      r1,|L14.16|
00000a  6008              STR      r0,[r1,#0]
;;;1156   }
00000c  4770              BX       lr
;;;1157   
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      0x40023800

                          AREA ||i.rcu_hxtal_clock_monitor_enable||, CODE, READONLY, ALIGN=2

                  rcu_hxtal_clock_monitor_enable PROC
;;;1141   
;;;1142   void rcu_hxtal_clock_monitor_enable(void)
000000  4803              LDR      r0,|L15.16|
;;;1143   {
;;;1144       RCU_CTL |= RCU_CTL_CKMEN;
000002  6800              LDR      r0,[r0,#0]
000004  f4402000          ORR      r0,r0,#0x80000
000008  4901              LDR      r1,|L15.16|
00000a  6008              STR      r0,[r1,#0]
;;;1145   }
00000c  4770              BX       lr
;;;1146   
                          ENDP

00000e  0000              DCW      0x0000
                  |L15.16|
                          DCD      0x40023800

                          AREA ||i.rcu_i2s_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_i2s_clock_config PROC
;;;649    */
;;;650    void rcu_i2s_clock_config(uint32_t i2s_clock_source)
000000  4a04              LDR      r2,|L16.20|
;;;651    {
;;;652        uint32_t reg;
;;;653    
;;;654        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;655        /* reset the I2SSEL bit and set according to i2s_clock_source */
;;;656        reg &= ~RCU_CFG0_I2SSEL;
000004  f4210100          BIC      r1,r1,#0x800000
;;;657        RCU_CFG0 = (reg | i2s_clock_source);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L16.20|
00000e  601a              STR      r2,[r3,#0]
;;;658    }
000010  4770              BX       lr
;;;659    
                          ENDP

000012  0000              DCW      0x0000
                  |L16.20|
                          DCD      0x40023808

                          AREA ||i.rcu_interrupt_disable||, CODE, READONLY, ALIGN=2

                  rcu_interrupt_disable PROC
;;;866    */
;;;867    void rcu_interrupt_disable(rcu_int_enum interrupt)
000000  4a07              LDR      r2,|L17.32|
;;;868    {
;;;869        RCU_REG_VAL(interrupt) &= ~BIT(RCU_BIT_POS(interrupt));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4391              BICS     r1,r1,r2
000014  4b02              LDR      r3,|L17.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;870    }
00001e  4770              BX       lr
;;;871    
                          ENDP

                  |L17.32|
                          DCD      0x40023000

                          AREA ||i.rcu_interrupt_enable||, CODE, READONLY, ALIGN=2

                  rcu_interrupt_enable PROC
;;;845    */
;;;846    void rcu_interrupt_enable(rcu_int_enum interrupt)
000000  4a07              LDR      r2,|L18.32|
;;;847    {
;;;848        RCU_REG_VAL(interrupt) |= BIT(RCU_BIT_POS(interrupt));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L18.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;849    }
00001e  4770              BX       lr
;;;850    
                          ENDP

                  |L18.32|
                          DCD      0x40023000

                          AREA ||i.rcu_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  rcu_interrupt_flag_clear PROC
;;;825    */
;;;826    void rcu_interrupt_flag_clear(rcu_int_flag_clear_enum int_flag)
000000  4a07              LDR      r2,|L19.32|
;;;827    {
;;;828        RCU_REG_VAL(int_flag) |= BIT(RCU_BIT_POS(int_flag));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L19.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;829    }
00001e  4770              BX       lr
;;;830    
                          ENDP

                  |L19.32|
                          DCD      0x40023000

                          AREA ||i.rcu_interrupt_flag_get||, CODE, READONLY, ALIGN=2

                  rcu_interrupt_flag_get PROC
;;;799    */
;;;800    FlagStatus rcu_interrupt_flag_get(rcu_int_flag_enum int_flag)
000000  4601              MOV      r1,r0
;;;801    {
;;;802        /* get the rcu interrupt flag */
;;;803        if(RESET != (RCU_REG_VAL(int_flag) & BIT(RCU_BIT_POS(int_flag)))) {
000002  4a07              LDR      r2,|L20.32|
000004  eb021091          ADD      r0,r2,r1,LSR #6
000008  f8d00800          LDR      r0,[r0,#0x800]
00000c  f001031f          AND      r3,r1,#0x1f
000010  2201              MOVS     r2,#1
000012  409a              LSLS     r2,r2,r3
000014  4010              ANDS     r0,r0,r2
000016  b108              CBZ      r0,|L20.28|
;;;804            return SET;
000018  2001              MOVS     r0,#1
                  |L20.26|
;;;805        } else {
;;;806            return RESET;
;;;807        }
;;;808    }
00001a  4770              BX       lr
                  |L20.28|
00001c  2000              MOVS     r0,#0                 ;806
00001e  e7fc              B        |L20.26|
;;;809    
                          ENDP

                  |L20.32|
                          DCD      0x40023000

                          AREA ||i.rcu_irc16m_adjust_value_set||, CODE, READONLY, ALIGN=2

                  rcu_irc16m_adjust_value_set PROC
;;;1164   */
;;;1165   void rcu_irc16m_adjust_value_set(uint32_t irc16m_adjval)
000000  4a05              LDR      r2,|L21.24|
;;;1166   {
;;;1167       uint32_t reg;
;;;1168   
;;;1169       reg = RCU_CTL;
000002  6811              LDR      r1,[r2,#0]
;;;1170       /* reset the IRC16MADJ bits and set according to irc16m_adjval */
;;;1171       reg &= ~RCU_CTL_IRC16MADJ;
000004  f02101f8          BIC      r1,r1,#0xf8
;;;1172       RCU_CTL = (reg | ((irc16m_adjval & RCU_IRC16M_ADJUST_MASK) << RCU_IRC16M_ADJUST_OFFSET));
000008  f000021f          AND      r2,r0,#0x1f
00000c  ea4102c2          ORR      r2,r1,r2,LSL #3
000010  4b01              LDR      r3,|L21.24|
000012  601a              STR      r2,[r3,#0]
;;;1173   }
000014  4770              BX       lr
;;;1174   
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      0x40023800

                          AREA ||i.rcu_lxtal_drive_capability_config||, CODE, READONLY, ALIGN=2

                  rcu_lxtal_drive_capability_config PROC
;;;880    */
;;;881    void rcu_lxtal_drive_capability_config(uint32_t lxtal_dricap)
000000  4a04              LDR      r2,|L22.20|
;;;882    {
;;;883        uint32_t reg;
;;;884    
;;;885        reg = RCU_BDCTL;
000002  6811              LDR      r1,[r2,#0]
;;;886    
;;;887        /* reset the LXTALDRI bits and set according to lxtal_dricap */
;;;888        reg &= ~RCU_BDCTL_LXTALDRI;
000004  f0210108          BIC      r1,r1,#8
;;;889        RCU_BDCTL = (reg | lxtal_dricap);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L22.20|
00000e  601a              STR      r2,[r3,#0]
;;;890    }
000010  4770              BX       lr
;;;891    
                          ENDP

000012  0000              DCW      0x0000
                  |L22.20|
                          DCD      0x40023870

                          AREA ||i.rcu_osci_bypass_mode_disable||, CODE, READONLY, ALIGN=2

                  rcu_osci_bypass_mode_disable PROC
;;;1105   */
;;;1106   void rcu_osci_bypass_mode_disable(rcu_osci_type_enum osci)
000000  4601              MOV      r1,r0
;;;1107   {
;;;1108       uint32_t reg;
;;;1109   
;;;1110       switch(osci) {
000002  291c              CMP      r1,#0x1c
000004  d030              BEQ      |L23.104|
000006  dc07              BGT      |L23.24|
000008  b349              CBZ      r1,|L23.94|
00000a  2910              CMP      r1,#0x10
00000c  d00f              BEQ      |L23.46|
00000e  2918              CMP      r1,#0x18
000010  d028              BEQ      |L23.100|
000012  291a              CMP      r1,#0x1a
000014  d129              BNE      |L23.106|
000016  e026              B        |L23.102|
                  |L23.24|
000018  f5b15fe0          CMP      r1,#0x1c00
00001c  d012              BEQ      |L23.68|
00001e  f5b15fe8          CMP      r1,#0x1d00
000022  d01e              BEQ      |L23.98|
000024  f5a15240          SUB      r2,r1,#0x3000
000028  3a10              SUBS     r2,r2,#0x10
00002a  b9f2              CBNZ     r2,|L23.106|
00002c  e018              B        |L23.96|
                  |L23.46|
;;;1111       /* disable HXTAL to bypass mode */
;;;1112       case RCU_HXTAL:
;;;1113           reg = RCU_CTL;
00002e  4a10              LDR      r2,|L23.112|
000030  6810              LDR      r0,[r2,#0]
;;;1114           RCU_CTL &= ~RCU_CTL_HXTALEN;
000032  6812              LDR      r2,[r2,#0]
000034  f4223280          BIC      r2,r2,#0x10000
000038  4b0d              LDR      r3,|L23.112|
00003a  601a              STR      r2,[r3,#0]
;;;1115           RCU_CTL = (reg & ~RCU_CTL_HXTALBPS);
00003c  f4202280          BIC      r2,r0,#0x40000
000040  601a              STR      r2,[r3,#0]
;;;1116           break;
000042  e013              B        |L23.108|
                  |L23.68|
;;;1117       /* disable LXTAL to bypass mode */
;;;1118       case RCU_LXTAL:
;;;1119           reg = RCU_BDCTL;
000044  4a0a              LDR      r2,|L23.112|
000046  3270              ADDS     r2,r2,#0x70
000048  6810              LDR      r0,[r2,#0]
;;;1120           RCU_BDCTL &= ~RCU_BDCTL_LXTALEN;
00004a  6812              LDR      r2,[r2,#0]
00004c  f0220201          BIC      r2,r2,#1
000050  4b07              LDR      r3,|L23.112|
000052  3370              ADDS     r3,r3,#0x70
000054  601a              STR      r2,[r3,#0]
;;;1121           RCU_BDCTL = (reg & ~RCU_BDCTL_LXTALBPS);
000056  f0200204          BIC      r2,r0,#4
00005a  601a              STR      r2,[r3,#0]
;;;1122           break;
00005c  e006              B        |L23.108|
                  |L23.94|
;;;1123       case RCU_IRC16M:
;;;1124       case RCU_IRC48M:
00005e  bf00              NOP      
                  |L23.96|
;;;1125       case RCU_IRC32K:
000060  bf00              NOP      
                  |L23.98|
;;;1126       case RCU_PLL_CK:
000062  bf00              NOP      
                  |L23.100|
;;;1127       case RCU_PLLI2S_CK:
000064  bf00              NOP      
                  |L23.102|
;;;1128       case RCU_PLLSAI_CK:
000066  bf00              NOP      
                  |L23.104|
;;;1129           break;
000068  e000              B        |L23.108|
                  |L23.106|
;;;1130       default:
;;;1131           break;
00006a  bf00              NOP      
                  |L23.108|
00006c  bf00              NOP                            ;1116
;;;1132       }
;;;1133   }
00006e  4770              BX       lr
;;;1134   
                          ENDP

                  |L23.112|
                          DCD      0x40023800

                          AREA ||i.rcu_osci_bypass_mode_enable||, CODE, READONLY, ALIGN=2

                  rcu_osci_bypass_mode_enable PROC
;;;1067   */
;;;1068   void rcu_osci_bypass_mode_enable(rcu_osci_type_enum osci)
000000  4601              MOV      r1,r0
;;;1069   {
;;;1070       uint32_t reg;
;;;1071   
;;;1072       switch(osci) {
000002  291c              CMP      r1,#0x1c
000004  d030              BEQ      |L24.104|
000006  dc07              BGT      |L24.24|
000008  b349              CBZ      r1,|L24.94|
00000a  2910              CMP      r1,#0x10
00000c  d00f              BEQ      |L24.46|
00000e  2918              CMP      r1,#0x18
000010  d028              BEQ      |L24.100|
000012  291a              CMP      r1,#0x1a
000014  d129              BNE      |L24.106|
000016  e026              B        |L24.102|
                  |L24.24|
000018  f5b15fe0          CMP      r1,#0x1c00
00001c  d012              BEQ      |L24.68|
00001e  f5b15fe8          CMP      r1,#0x1d00
000022  d01e              BEQ      |L24.98|
000024  f5a15240          SUB      r2,r1,#0x3000
000028  3a10              SUBS     r2,r2,#0x10
00002a  b9f2              CBNZ     r2,|L24.106|
00002c  e018              B        |L24.96|
                  |L24.46|
;;;1073       /* enable HXTAL to bypass mode */
;;;1074       case RCU_HXTAL:
;;;1075           reg = RCU_CTL;
00002e  4a10              LDR      r2,|L24.112|
000030  6810              LDR      r0,[r2,#0]
;;;1076           RCU_CTL &= ~RCU_CTL_HXTALEN;
000032  6812              LDR      r2,[r2,#0]
000034  f4223280          BIC      r2,r2,#0x10000
000038  4b0d              LDR      r3,|L24.112|
00003a  601a              STR      r2,[r3,#0]
;;;1077           RCU_CTL = (reg | RCU_CTL_HXTALBPS);
00003c  f4402280          ORR      r2,r0,#0x40000
000040  601a              STR      r2,[r3,#0]
;;;1078           break;
000042  e013              B        |L24.108|
                  |L24.68|
;;;1079       /* enable LXTAL to bypass mode */
;;;1080       case RCU_LXTAL:
;;;1081           reg = RCU_BDCTL;
000044  4a0a              LDR      r2,|L24.112|
000046  3270              ADDS     r2,r2,#0x70
000048  6810              LDR      r0,[r2,#0]
;;;1082           RCU_BDCTL &= ~RCU_BDCTL_LXTALEN;
00004a  6812              LDR      r2,[r2,#0]
00004c  f0220201          BIC      r2,r2,#1
000050  4b07              LDR      r3,|L24.112|
000052  3370              ADDS     r3,r3,#0x70
000054  601a              STR      r2,[r3,#0]
;;;1083           RCU_BDCTL = (reg | RCU_BDCTL_LXTALBPS);
000056  f0400204          ORR      r2,r0,#4
00005a  601a              STR      r2,[r3,#0]
;;;1084           break;
00005c  e006              B        |L24.108|
                  |L24.94|
;;;1085       case RCU_IRC16M:
;;;1086       case RCU_IRC48M:
00005e  bf00              NOP      
                  |L24.96|
;;;1087       case RCU_IRC32K:
000060  bf00              NOP      
                  |L24.98|
;;;1088       case RCU_PLL_CK:
000062  bf00              NOP      
                  |L24.100|
;;;1089       case RCU_PLLI2S_CK:
000064  bf00              NOP      
                  |L24.102|
;;;1090       case RCU_PLLSAI_CK:
000066  bf00              NOP      
                  |L24.104|
;;;1091           break;
000068  e000              B        |L24.108|
                  |L24.106|
;;;1092       default:
;;;1093           break;
00006a  bf00              NOP      
                  |L24.108|
00006c  bf00              NOP                            ;1078
;;;1094       }
;;;1095   }
00006e  4770              BX       lr
;;;1096   
                          ENDP

                  |L24.112|
                          DCD      0x40023800

                          AREA ||i.rcu_osci_off||, CODE, READONLY, ALIGN=2

                  rcu_osci_off PROC
;;;1053   */
;;;1054   void rcu_osci_off(rcu_osci_type_enum osci)
000000  4a07              LDR      r2,|L25.32|
;;;1055   {
;;;1056       RCU_REG_VAL(osci) &= ~BIT(RCU_BIT_POS(osci));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4391              BICS     r1,r1,r2
000014  4b02              LDR      r3,|L25.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;1057   }
00001e  4770              BX       lr
;;;1058   
                          ENDP

                  |L25.32|
                          DCD      0x40023000

                          AREA ||i.rcu_osci_on||, CODE, READONLY, ALIGN=2

                  rcu_osci_on PROC
;;;1033   */
;;;1034   void rcu_osci_on(rcu_osci_type_enum osci)
000000  4a07              LDR      r2,|L26.32|
;;;1035   {
;;;1036       RCU_REG_VAL(osci) |= BIT(RCU_BIT_POS(osci));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L26.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;1037   }
00001e  4770              BX       lr
;;;1038   
                          ENDP

                  |L26.32|
                          DCD      0x40023000

                          AREA ||i.rcu_osci_stab_wait||, CODE, READONLY, ALIGN=2

                  rcu_osci_stab_wait PROC
;;;906    */
;;;907    ErrStatus rcu_osci_stab_wait(rcu_osci_type_enum osci)
000000  b5f0              PUSH     {r4-r7,lr}
;;;908    {
000002  4606              MOV      r6,r0
;;;909        uint32_t stb_cnt = 0U;
000004  2400              MOVS     r4,#0
;;;910        ErrStatus reval = ERROR;
000006  2700              MOVS     r7,#0
;;;911        FlagStatus osci_stat = RESET;
000008  2500              MOVS     r5,#0
;;;912    
;;;913        switch(osci) {
00000a  2e1c              CMP      r6,#0x1c
00000c  d07d              BEQ      |L27.266|
00000e  dc07              BGT      |L27.32|
000010  b3b6              CBZ      r6,|L27.128|
000012  2e10              CMP      r6,#0x10
000014  d010              BEQ      |L27.56|
000016  2e18              CMP      r6,#0x18
000018  d067              BEQ      |L27.234|
00001a  2e1a              CMP      r6,#0x1a
                  |L27.28|
00001c  d176              BNE      |L27.268|
00001e  e076              B        |L27.270|
                  |L27.32|
000020  f5b65fe0          CMP      r6,#0x1c00
000024  d019              BEQ      |L27.90|
000026  f5b65fe8          CMP      r6,#0x1d00
00002a  d04c              BEQ      |L27.198|
00002c  f5a65040          SUB      r0,r6,#0x3000
000030  3810              SUBS     r0,r0,#0x10
000032  2800              CMP      r0,#0
000034  d1f2              BNE      |L27.28|
000036  e034              B        |L27.162|
                  |L27.56|
;;;914        /* wait HXTAL stable */
;;;915        case RCU_HXTAL:
;;;916            while((RESET == osci_stat) && (HXTAL_STARTUP_TIMEOUT != stb_cnt)) {
000038  e004              B        |L27.68|
                  |L27.58|
;;;917                osci_stat = rcu_flag_get(RCU_FLAG_HXTALSTB);
00003a  2011              MOVS     r0,#0x11
00003c  f7fffffe          BL       rcu_flag_get
000040  4605              MOV      r5,r0
;;;918                stb_cnt++;
000042  1c64              ADDS     r4,r4,#1
                  |L27.68|
000044  b91d              CBNZ     r5,|L27.78|
000046  f64f70ff          MOV      r0,#0xffff            ;916
00004a  4284              CMP      r4,r0                 ;916
00004c  d1f5              BNE      |L27.58|
                  |L27.78|
;;;919            }
;;;920    
;;;921            /* check whether flag is set */
;;;922            if(RESET != rcu_flag_get(RCU_FLAG_HXTALSTB)) {
00004e  2011              MOVS     r0,#0x11
000050  f7fffffe          BL       rcu_flag_get
000054  b100              CBZ      r0,|L27.88|
;;;923                reval = SUCCESS;
000056  2701              MOVS     r7,#1
                  |L27.88|
;;;924            }
;;;925            break;
000058  e07a              B        |L27.336|
                  |L27.90|
;;;926        /* wait LXTAL stable */
;;;927        case RCU_LXTAL:
;;;928            while((RESET == osci_stat) && (LXTAL_STARTUP_TIMEOUT != stb_cnt)) {
00005a  e005              B        |L27.104|
                  |L27.92|
;;;929                osci_stat = rcu_flag_get(RCU_FLAG_LXTALSTB);
00005c  f6414001          MOV      r0,#0x1c01
000060  f7fffffe          BL       rcu_flag_get
000064  4605              MOV      r5,r0
;;;930                stb_cnt++;
000066  1c64              ADDS     r4,r4,#1
                  |L27.104|
000068  b91d              CBNZ     r5,|L27.114|
00006a  f06f4070          MVN      r0,#0xf0000000        ;928
00006e  4284              CMP      r4,r0                 ;928
000070  d1f4              BNE      |L27.92|
                  |L27.114|
;;;931            }
;;;932    
;;;933            /* check whether flag is set */
;;;934            if(RESET != rcu_flag_get(RCU_FLAG_LXTALSTB)) {
000072  f6414001          MOV      r0,#0x1c01
000076  f7fffffe          BL       rcu_flag_get
00007a  b100              CBZ      r0,|L27.126|
;;;935                reval = SUCCESS;
00007c  2701              MOVS     r7,#1
                  |L27.126|
;;;936            }
;;;937            break;
00007e  e067              B        |L27.336|
                  |L27.128|
000080  e7ff              B        |L27.130|
                  |L27.130|
;;;938        /* wait IRC16M stable */
;;;939        case RCU_IRC16M:
;;;940            while((RESET == osci_stat) && (IRC16M_STARTUP_TIMEOUT != stb_cnt)) {
000082  e004              B        |L27.142|
                  |L27.132|
;;;941                osci_stat = rcu_flag_get(RCU_FLAG_IRC16MSTB);
000084  2001              MOVS     r0,#1
000086  f7fffffe          BL       rcu_flag_get
00008a  4605              MOV      r5,r0
;;;942                stb_cnt++;
00008c  1c64              ADDS     r4,r4,#1
                  |L27.142|
00008e  b915              CBNZ     r5,|L27.150|
000090  f5b46fa0          CMP      r4,#0x500             ;940
000094  d1f6              BNE      |L27.132|
                  |L27.150|
;;;943            }
;;;944    
;;;945            /* check whether flag is set */
;;;946            if(RESET != rcu_flag_get(RCU_FLAG_IRC16MSTB)) {
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       rcu_flag_get
00009c  b100              CBZ      r0,|L27.160|
;;;947                reval = SUCCESS;
00009e  2701              MOVS     r7,#1
                  |L27.160|
;;;948            }
;;;949            break;
0000a0  e056              B        |L27.336|
                  |L27.162|
;;;950        /* wait IRC48M stable */
;;;951        case RCU_IRC48M:
;;;952            while((RESET == osci_stat) && (OSC_STARTUP_TIMEOUT != stb_cnt)) {
0000a2  e005              B        |L27.176|
                  |L27.164|
;;;953                osci_stat = rcu_flag_get(RCU_FLAG_IRC48MSTB);
0000a4  f2430011          MOV      r0,#0x3011
0000a8  f7fffffe          BL       rcu_flag_get
0000ac  4605              MOV      r5,r0
;;;954                stb_cnt++;
0000ae  1c64              ADDS     r4,r4,#1
                  |L27.176|
0000b0  b915              CBNZ     r5,|L27.184|
0000b2  4829              LDR      r0,|L27.344|
0000b4  4284              CMP      r4,r0                 ;952
0000b6  d1f5              BNE      |L27.164|
                  |L27.184|
;;;955            }
;;;956    
;;;957            /* check whether flag is set */
;;;958            if(RESET != rcu_flag_get(RCU_FLAG_IRC48MSTB)) {
0000b8  f2430011          MOV      r0,#0x3011
0000bc  f7fffffe          BL       rcu_flag_get
0000c0  b100              CBZ      r0,|L27.196|
;;;959                reval = SUCCESS;
0000c2  2701              MOVS     r7,#1
                  |L27.196|
;;;960            }
;;;961            break;
0000c4  e044              B        |L27.336|
                  |L27.198|
;;;962        /* wait IRC32K stable */
;;;963        case RCU_IRC32K:
;;;964            while((RESET == osci_stat) && (OSC_STARTUP_TIMEOUT != stb_cnt)) {
0000c6  e005              B        |L27.212|
                  |L27.200|
;;;965                osci_stat = rcu_flag_get(RCU_FLAG_IRC32KSTB);
0000c8  f6415001          MOV      r0,#0x1d01
0000cc  f7fffffe          BL       rcu_flag_get
0000d0  4605              MOV      r5,r0
;;;966                stb_cnt++;
0000d2  1c64              ADDS     r4,r4,#1
                  |L27.212|
0000d4  b915              CBNZ     r5,|L27.220|
0000d6  4820              LDR      r0,|L27.344|
0000d8  4284              CMP      r4,r0                 ;964
0000da  d1f5              BNE      |L27.200|
                  |L27.220|
;;;967            }
;;;968    
;;;969            /* check whether flag is set */
;;;970            if(RESET != rcu_flag_get(RCU_FLAG_IRC32KSTB)) {
0000dc  f6415001          MOV      r0,#0x1d01
0000e0  f7fffffe          BL       rcu_flag_get
0000e4  b100              CBZ      r0,|L27.232|
;;;971                reval = SUCCESS;
0000e6  2701              MOVS     r7,#1
                  |L27.232|
;;;972            }
;;;973            break;
0000e8  e032              B        |L27.336|
                  |L27.234|
;;;974        /* wait PLL stable */
;;;975        case RCU_PLL_CK:
;;;976            while((RESET == osci_stat) && (OSC_STARTUP_TIMEOUT != stb_cnt)) {
0000ea  e004              B        |L27.246|
                  |L27.236|
;;;977                osci_stat = rcu_flag_get(RCU_FLAG_PLLSTB);
0000ec  2019              MOVS     r0,#0x19
0000ee  f7fffffe          BL       rcu_flag_get
0000f2  4605              MOV      r5,r0
;;;978                stb_cnt++;
0000f4  1c64              ADDS     r4,r4,#1
                  |L27.246|
0000f6  b915              CBNZ     r5,|L27.254|
0000f8  4817              LDR      r0,|L27.344|
0000fa  4284              CMP      r4,r0                 ;976
0000fc  d1f6              BNE      |L27.236|
                  |L27.254|
;;;979            }
;;;980    
;;;981            /* check whether flag is set */
;;;982            if(RESET != rcu_flag_get(RCU_FLAG_PLLSTB)) {
0000fe  2019              MOVS     r0,#0x19
000100  f7fffffe          BL       rcu_flag_get
000104  b100              CBZ      r0,|L27.264|
;;;983                reval = SUCCESS;
000106  2701              MOVS     r7,#1
                  |L27.264|
;;;984            }
;;;985            break;
000108  e022              B        |L27.336|
                  |L27.266|
00010a  e010              B        |L27.302|
                  |L27.268|
00010c  e01f              B        |L27.334|
                  |L27.270|
;;;986        /* wait PLLI2S stable */
;;;987        case RCU_PLLI2S_CK:
;;;988            while((RESET == osci_stat) && (OSC_STARTUP_TIMEOUT != stb_cnt)) {
00010e  e004              B        |L27.282|
                  |L27.272|
;;;989                osci_stat = rcu_flag_get(RCU_FLAG_PLLI2SSTB);
000110  201b              MOVS     r0,#0x1b
000112  f7fffffe          BL       rcu_flag_get
000116  4605              MOV      r5,r0
;;;990                stb_cnt++;
000118  1c64              ADDS     r4,r4,#1
                  |L27.282|
00011a  b915              CBNZ     r5,|L27.290|
00011c  480e              LDR      r0,|L27.344|
00011e  4284              CMP      r4,r0                 ;988
000120  d1f6              BNE      |L27.272|
                  |L27.290|
;;;991            }
;;;992    
;;;993            /* check whether flag is set */
;;;994            if(RESET != rcu_flag_get(RCU_FLAG_PLLI2SSTB)) {
000122  201b              MOVS     r0,#0x1b
000124  f7fffffe          BL       rcu_flag_get
000128  b100              CBZ      r0,|L27.300|
;;;995                reval = SUCCESS;
00012a  2701              MOVS     r7,#1
                  |L27.300|
;;;996            }
;;;997            break;
00012c  e010              B        |L27.336|
                  |L27.302|
;;;998        /* wait PLLSAI stable */
;;;999        case RCU_PLLSAI_CK:
;;;1000           while((RESET == osci_stat) && (OSC_STARTUP_TIMEOUT != stb_cnt)) {
00012e  e004              B        |L27.314|
                  |L27.304|
;;;1001               osci_stat = rcu_flag_get(RCU_FLAG_PLLSAISTB);
000130  201d              MOVS     r0,#0x1d
000132  f7fffffe          BL       rcu_flag_get
000136  4605              MOV      r5,r0
;;;1002               stb_cnt++;
000138  1c64              ADDS     r4,r4,#1
                  |L27.314|
00013a  b915              CBNZ     r5,|L27.322|
00013c  4806              LDR      r0,|L27.344|
00013e  4284              CMP      r4,r0                 ;1000
000140  d1f6              BNE      |L27.304|
                  |L27.322|
;;;1003           }
;;;1004   
;;;1005           /* check whether flag is set */
;;;1006           if(RESET != rcu_flag_get(RCU_FLAG_PLLSAISTB)) {
000142  201d              MOVS     r0,#0x1d
000144  f7fffffe          BL       rcu_flag_get
000148  b100              CBZ      r0,|L27.332|
;;;1007               reval = SUCCESS;
00014a  2701              MOVS     r7,#1
                  |L27.332|
;;;1008           }
;;;1009           break;
00014c  e000              B        |L27.336|
                  |L27.334|
;;;1010   
;;;1011       default:
;;;1012           break;
00014e  bf00              NOP      
                  |L27.336|
000150  bf00              NOP                            ;925
;;;1013       }
;;;1014   
;;;1015       /* return value */
;;;1016       return reval;
000152  4638              MOV      r0,r7
;;;1017   }
000154  bdf0              POP      {r4-r7,pc}
;;;1018   
                          ENDP

000156  0000              DCW      0x0000
                  |L27.344|
                          DCD      0x000fffff

                          AREA ||i.rcu_periph_clock_disable||, CODE, READONLY, ALIGN=2

                  rcu_periph_clock_disable PROC
;;;167    */
;;;168    void rcu_periph_clock_disable(rcu_periph_enum periph)
000000  4a07              LDR      r2,|L28.32|
;;;169    {
;;;170        RCU_REG_VAL(periph) &= ~BIT(RCU_BIT_POS(periph));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4391              BICS     r1,r1,r2
000014  4b02              LDR      r3,|L28.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;171    }
00001e  4770              BX       lr
;;;172    
                          ENDP

                  |L28.32|
                          DCD      0x40023000

                          AREA ||i.rcu_periph_clock_enable||, CODE, READONLY, ALIGN=2

                  rcu_periph_clock_enable PROC
;;;123    */
;;;124    void rcu_periph_clock_enable(rcu_periph_enum periph)
000000  4a07              LDR      r2,|L29.32|
;;;125    {
;;;126        RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L29.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;127    }
00001e  4770              BX       lr
;;;128    
                          ENDP

                  |L29.32|
                          DCD      0x40023000

                          AREA ||i.rcu_periph_clock_sleep_disable||, CODE, READONLY, ALIGN=2

                  rcu_periph_clock_sleep_disable PROC
;;;261    */
;;;262    void rcu_periph_clock_sleep_disable(rcu_periph_sleep_enum periph)
000000  4a07              LDR      r2,|L30.32|
;;;263    {
;;;264        RCU_REG_VAL(periph) &= ~BIT(RCU_BIT_POS(periph));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4391              BICS     r1,r1,r2
000014  4b02              LDR      r3,|L30.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;265    }
00001e  4770              BX       lr
;;;266    
                          ENDP

                  |L30.32|
                          DCD      0x40023000

                          AREA ||i.rcu_periph_clock_sleep_enable||, CODE, READONLY, ALIGN=2

                  rcu_periph_clock_sleep_enable PROC
;;;214    */
;;;215    void rcu_periph_clock_sleep_enable(rcu_periph_sleep_enum periph)
000000  4a07              LDR      r2,|L31.32|
;;;216    {
;;;217        RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L31.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;218    }
00001e  4770              BX       lr
;;;219    
                          ENDP

                  |L31.32|
                          DCD      0x40023000

                          AREA ||i.rcu_periph_reset_disable||, CODE, READONLY, ALIGN=2

                  rcu_periph_reset_disable PROC
;;;335    */
;;;336    void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
000000  4a07              LDR      r2,|L32.32|
;;;337    {
;;;338        RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4391              BICS     r1,r1,r2
000014  4b02              LDR      r3,|L32.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;339    }
00001e  4770              BX       lr
;;;340    
                          ENDP

                  |L32.32|
                          DCD      0x40023000

                          AREA ||i.rcu_periph_reset_enable||, CODE, READONLY, ALIGN=2

                  rcu_periph_reset_enable PROC
;;;298    */
;;;299    void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
000000  4a07              LDR      r2,|L33.32|
;;;300    {
;;;301        RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
000002  eb021190          ADD      r1,r2,r0,LSR #6
000006  f8d11800          LDR      r1,[r1,#0x800]
00000a  f000031f          AND      r3,r0,#0x1f
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4b02              LDR      r3,|L33.32|
000016  eb031290          ADD      r2,r3,r0,LSR #6
00001a  f8c21800          STR      r1,[r2,#0x800]
;;;302    }
00001e  4770              BX       lr
;;;303    
                          ENDP

                  |L33.32|
                          DCD      0x40023000

                          AREA ||i.rcu_pll48m_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_pll48m_clock_config PROC
;;;687    */
;;;688    void rcu_pll48m_clock_config(uint32_t pll48m_clock_source)
000000  4a04              LDR      r2,|L34.20|
;;;689    {
;;;690        uint32_t reg;
;;;691    
;;;692        reg = RCU_ADDCTL;
000002  6811              LDR      r1,[r2,#0]
;;;693        /* reset the PLL48MSEL bit and set according to pll48m_clock_source */
;;;694        reg &= ~RCU_ADDCTL_PLL48MSEL;
000004  f0210102          BIC      r1,r1,#2
;;;695        RCU_ADDCTL = (reg | pll48m_clock_source);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L34.20|
00000e  601a              STR      r2,[r3,#0]
;;;696    }
000010  4770              BX       lr
;;;697    
                          ENDP

000012  0000              DCW      0x0000
                  |L34.20|
                          DCD      0x400238c0

                          AREA ||i.rcu_pll_config||, CODE, READONLY, ALIGN=2

                  rcu_pll_config PROC
;;;520    */
;;;521    ErrStatus rcu_pll_config(uint32_t pll_src, uint32_t pll_psc, uint32_t pll_n, uint32_t pll_p, uint32_t pll_q)
000000  b5f0              PUSH     {r4-r7,lr}
;;;522    {
000002  4606              MOV      r6,r0
000004  9c05              LDR      r4,[sp,#0x14]
;;;523        uint32_t ss_modulation_inc;
;;;524        uint32_t ss_modulation_reg;
;;;525    
;;;526        ss_modulation_inc = 0U;
000006  2500              MOVS     r5,#0
;;;527        ss_modulation_reg = RCU_PLLSSCTL;
000008  481d              LDR      r0,|L35.128|
00000a  6807              LDR      r7,[r0,#0]
;;;528    
;;;529        /* calculate the minimum factor of PLLN */
;;;530        if((ss_modulation_reg & RCU_PLLSSCTL_SSCGON) == RCU_PLLSSCTL_SSCGON) {
00000c  f0074000          AND      r0,r7,#0x80000000
000010  f1b04f00          CMP      r0,#0x80000000
000014  d107              BNE      |L35.38|
;;;531            if((ss_modulation_reg & RCU_SS_TYPE_DOWN) == RCU_SS_TYPE_DOWN) {
000016  f0074080          AND      r0,r7,#0x40000000
00001a  f1b04f80          CMP      r0,#0x40000000
00001e  d101              BNE      |L35.36|
;;;532                ss_modulation_inc += RCU_SS_MODULATION_DOWN_INC;
000020  1ded              ADDS     r5,r5,#7
000022  e000              B        |L35.38|
                  |L35.36|
;;;533            } else {
;;;534                ss_modulation_inc += RCU_SS_MODULATION_CENTER_INC;
000024  1d6d              ADDS     r5,r5,#5
                  |L35.38|
;;;535            }
;;;536        }
;;;537    
;;;538        /* check the function parameter */
;;;539        if(CHECK_PLL_PSC_VALID(pll_psc) && CHECK_PLL_N_VALID(pll_n, ss_modulation_inc) &&
000026  2902              CMP      r1,#2
000028  d326              BCC      |L35.120|
00002a  293f              CMP      r1,#0x3f
00002c  d824              BHI      |L35.120|
00002e  f1050040          ADD      r0,r5,#0x40
000032  4290              CMP      r0,r2
000034  d820              BHI      |L35.120|
000036  f5b27ffa          CMP      r2,#0x1f4
00003a  d81d              BHI      |L35.120|
;;;540                CHECK_PLL_P_VALID(pll_p) && CHECK_PLL_Q_VALID(pll_q)) {
00003c  2b02              CMP      r3,#2
00003e  d005              BEQ      |L35.76|
000040  2b04              CMP      r3,#4
000042  d003              BEQ      |L35.76|
000044  2b06              CMP      r3,#6
000046  d001              BEQ      |L35.76|
000048  2b08              CMP      r3,#8
00004a  d115              BNE      |L35.120|
                  |L35.76|
00004c  2c02              CMP      r4,#2
00004e  d313              BCC      |L35.120|
000050  2c0f              CMP      r4,#0xf
000052  d811              BHI      |L35.120|
;;;541            RCU_PLL = pll_psc | (pll_n << 6) | (((pll_p >> 1) - 1U) << 16) |
000054  ea411082          ORR      r0,r1,r2,LSL #6
000058  f04f0c01          MOV      r12,#1
00005c  ebcc0c53          RSB      r12,r12,r3,LSR #1
000060  ea40400c          ORR      r0,r0,r12,LSL #16
000064  4330              ORRS     r0,r0,r6
000066  ea406004          ORR      r0,r0,r4,LSL #24
00006a  f8dfc014          LDR      r12,|L35.128|
00006e  f1ac0c7c          SUB      r12,r12,#0x7c
000072  f8cc0000          STR      r0,[r12,#0]
000076  e001              B        |L35.124|
                  |L35.120|
;;;542                      (pll_src) | (pll_q << 24);
;;;543        } else {
;;;544            /* return status */
;;;545            return ERROR;
000078  2000              MOVS     r0,#0
                  |L35.122|
;;;546        }
;;;547    
;;;548        /* return status */
;;;549        return SUCCESS;
;;;550    }
00007a  bdf0              POP      {r4-r7,pc}
                  |L35.124|
00007c  2001              MOVS     r0,#1                 ;549
00007e  e7fc              B        |L35.122|
;;;551    
                          ENDP

                  |L35.128|
                          DCD      0x40023880

                          AREA ||i.rcu_plli2s_config||, CODE, READONLY, ALIGN=2

                  rcu_plli2s_config PROC
;;;560    */
;;;561    ErrStatus rcu_plli2s_config(uint32_t plli2s_n, uint32_t plli2s_r)
000000  4602              MOV      r2,r0
;;;562    {
;;;563        /* check the function parameter */
;;;564        if(CHECK_PLLI2S_N_VALID(plli2s_n) && CHECK_PLLI2S_R_VALID(plli2s_r)) {
000002  2a32              CMP      r2,#0x32
000004  d30c              BCC      |L36.32|
000006  f5b27ffa          CMP      r2,#0x1f4
00000a  d809              BHI      |L36.32|
00000c  2902              CMP      r1,#2
00000e  d307              BCC      |L36.32|
000010  2907              CMP      r1,#7
000012  d805              BHI      |L36.32|
;;;565            RCU_PLLI2S = (plli2s_n << 6) | (plli2s_r << 28);
000014  0190              LSLS     r0,r2,#6
000016  ea407001          ORR      r0,r0,r1,LSL #28
00001a  4b03              LDR      r3,|L36.40|
00001c  6018              STR      r0,[r3,#0]
00001e  e001              B        |L36.36|
                  |L36.32|
;;;566        } else {
;;;567            /* return status */
;;;568            return ERROR;
000020  2000              MOVS     r0,#0
                  |L36.34|
;;;569        }
;;;570    
;;;571        /* return status */
;;;572        return SUCCESS;
;;;573    }
000022  4770              BX       lr
                  |L36.36|
000024  2001              MOVS     r0,#1                 ;572
000026  e7fc              B        |L36.34|
;;;574    
                          ENDP

                  |L36.40|
                          DCD      0x40023884

                          AREA ||i.rcu_pllsai_config||, CODE, READONLY, ALIGN=2

                  rcu_pllsai_config PROC
;;;585    */
;;;586    ErrStatus rcu_pllsai_config(uint32_t pllsai_n, uint32_t pllsai_p, uint32_t pllsai_r)
000000  b510              PUSH     {r4,lr}
;;;587    {
000002  4603              MOV      r3,r0
;;;588        /* check the function parameter */
;;;589        if(CHECK_PLLSAI_N_VALID(pllsai_n) && CHECK_PLLSAI_P_VALID(pllsai_p) && CHECK_PLLSAI_R_VALID(pllsai_r)) {
000004  2b32              CMP      r3,#0x32
000006  d319              BCC      |L37.60|
000008  f5b37ffa          CMP      r3,#0x1f4
00000c  d816              BHI      |L37.60|
00000e  2902              CMP      r1,#2
000010  d005              BEQ      |L37.30|
000012  2904              CMP      r1,#4
000014  d003              BEQ      |L37.30|
000016  2906              CMP      r1,#6
000018  d001              BEQ      |L37.30|
00001a  2908              CMP      r1,#8
00001c  d10e              BNE      |L37.60|
                  |L37.30|
00001e  2a02              CMP      r2,#2
000020  d30c              BCC      |L37.60|
000022  2a07              CMP      r2,#7
000024  d80a              BHI      |L37.60|
;;;590            RCU_PLLSAI = (pllsai_n << 6U) | (((pllsai_p >> 1U) - 1U) << 16U) | (pllsai_r << 28U);
000026  0198              LSLS     r0,r3,#6
000028  2401              MOVS     r4,#1
00002a  ebc40451          RSB      r4,r4,r1,LSR #1
00002e  ea404004          ORR      r0,r0,r4,LSL #16
000032  ea407002          ORR      r0,r0,r2,LSL #28
000036  4c03              LDR      r4,|L37.68|
000038  6020              STR      r0,[r4,#0]
00003a  e001              B        |L37.64|
                  |L37.60|
;;;591        } else {
;;;592            /* return status */
;;;593            return ERROR;
00003c  2000              MOVS     r0,#0
                  |L37.62|
;;;594        }
;;;595    
;;;596        /* return status */
;;;597        return SUCCESS;
;;;598    }
00003e  bd10              POP      {r4,pc}
                  |L37.64|
000040  2001              MOVS     r0,#1                 ;597
000042  e7fc              B        |L37.62|
;;;599    
                          ENDP

                  |L37.68|
                          DCD      0x40023888

                          AREA ||i.rcu_rtc_clock_config||, CODE, READONLY, ALIGN=2

                  rcu_rtc_clock_config PROC
;;;610    */
;;;611    void rcu_rtc_clock_config(uint32_t rtc_clock_source)
000000  4a04              LDR      r2,|L38.20|
;;;612    {
;;;613        uint32_t reg;
;;;614    
;;;615        reg = RCU_BDCTL;
000002  6811              LDR      r1,[r2,#0]
;;;616        /* reset the RTCSRC bits and set according to rtc_clock_source */
;;;617        reg &= ~RCU_BDCTL_RTCSRC;
000004  f4217140          BIC      r1,r1,#0x300
;;;618        RCU_BDCTL = (reg | rtc_clock_source);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L38.20|
00000e  601a              STR      r2,[r3,#0]
;;;619    }
000010  4770              BX       lr
;;;620    
                          ENDP

000012  0000              DCW      0x0000
                  |L38.20|
                          DCD      0x40023870

                          AREA ||i.rcu_rtc_div_config||, CODE, READONLY, ALIGN=2

                  rcu_rtc_div_config PROC
;;;629    */
;;;630    void rcu_rtc_div_config(uint32_t rtc_div)
000000  4a04              LDR      r2,|L39.20|
;;;631    {
;;;632        uint32_t reg;
;;;633    
;;;634        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;635        /* reset the RTCDIV bits and set according to rtc_div value */
;;;636        reg &= ~RCU_CFG0_RTCDIV;
000004  f42111f8          BIC      r1,r1,#0x1f0000
;;;637        RCU_CFG0 = (reg | rtc_div);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L39.20|
00000e  601a              STR      r2,[r3,#0]
;;;638    }
000010  4770              BX       lr
;;;639    
                          ENDP

000012  0000              DCW      0x0000
                  |L39.20|
                          DCD      0x40023808

                          AREA ||i.rcu_spread_spectrum_config||, CODE, READONLY, ALIGN=2

                  rcu_spread_spectrum_config PROC
;;;1214   */
;;;1215   void rcu_spread_spectrum_config(uint32_t spread_spectrum_type, uint32_t modstep, uint32_t modcnt)
000000  b530              PUSH     {r4,r5,lr}
;;;1216   {
;;;1217       uint32_t reg;
;;;1218   
;;;1219       reg = RCU_PLLSSCTL;
000002  4c06              LDR      r4,|L40.28|
000004  6823              LDR      r3,[r4,#0]
;;;1220       /* reset the RCU_PLLSSCTL register bits */
;;;1221       reg &= ~(RCU_PLLSSCTL_MODCNT | RCU_PLLSSCTL_MODSTEP | RCU_PLLSSCTL_SS_TYPE);
000006  f0034330          AND      r3,r3,#0xb0000000
;;;1222       RCU_PLLSSCTL = (reg | spread_spectrum_type | modstep << 13 | modcnt);
00000a  ea430400          ORR      r4,r3,r0
00000e  ea443441          ORR      r4,r4,r1,LSL #13
000012  4314              ORRS     r4,r4,r2
000014  4d01              LDR      r5,|L40.28|
000016  602c              STR      r4,[r5,#0]
;;;1223   }
000018  bd30              POP      {r4,r5,pc}
;;;1224   
                          ENDP

00001a  0000              DCW      0x0000
                  |L40.28|
                          DCD      0x40023880

                          AREA ||i.rcu_spread_spectrum_disable||, CODE, READONLY, ALIGN=2

                  rcu_spread_spectrum_disable PROC
;;;1241   */
;;;1242   void rcu_spread_spectrum_disable(void)
000000  4803              LDR      r0,|L41.16|
;;;1243   {
;;;1244       RCU_PLLSSCTL &= ~RCU_PLLSSCTL_SSCGON;
000002  6800              LDR      r0,[r0,#0]
000004  f0204000          BIC      r0,r0,#0x80000000
000008  4901              LDR      r1,|L41.16|
00000a  6008              STR      r0,[r1,#0]
;;;1245   }
00000c  4770              BX       lr
;;;1246   
                          ENDP

00000e  0000              DCW      0x0000
                  |L41.16|
                          DCD      0x40023880

                          AREA ||i.rcu_spread_spectrum_enable||, CODE, READONLY, ALIGN=2

                  rcu_spread_spectrum_enable PROC
;;;1230   */
;;;1231   void rcu_spread_spectrum_enable(void)
000000  4803              LDR      r0,|L42.16|
;;;1232   {
;;;1233       RCU_PLLSSCTL |= RCU_PLLSSCTL_SSCGON;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L42.16|
00000a  6008              STR      r0,[r1,#0]
;;;1234   }
00000c  4770              BX       lr
;;;1235   
                          ENDP

00000e  0000              DCW      0x0000
                  |L42.16|
                          DCD      0x40023880

                          AREA ||i.rcu_system_clock_source_config||, CODE, READONLY, ALIGN=2

                  rcu_system_clock_source_config PROC
;;;372    */
;;;373    void rcu_system_clock_source_config(uint32_t ck_sys)
000000  4a04              LDR      r2,|L43.20|
;;;374    {
;;;375        uint32_t reg;
;;;376    
;;;377        reg = RCU_CFG0;
000002  6811              LDR      r1,[r2,#0]
;;;378        /* reset the SCS bits and set according to ck_sys */
;;;379        reg &= ~RCU_CFG0_SCS;
000004  f0210103          BIC      r1,r1,#3
;;;380        RCU_CFG0 = (reg | ck_sys);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L43.20|
00000e  601a              STR      r2,[r3,#0]
;;;381    }
000010  4770              BX       lr
;;;382    
                          ENDP

000012  0000              DCW      0x0000
                  |L43.20|
                          DCD      0x40023808

                          AREA ||i.rcu_system_clock_source_get||, CODE, READONLY, ALIGN=2

                  rcu_system_clock_source_get PROC
;;;391    */
;;;392    uint32_t rcu_system_clock_source_get(void)
000000  4802              LDR      r0,|L44.12|
;;;393    {
;;;394        return (RCU_CFG0 & RCU_CFG0_SCSS);
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;395    }
000008  4770              BX       lr
;;;396    
                          ENDP

00000a  0000              DCW      0x0000
                  |L44.12|
                          DCD      0x40023808

                          AREA ||i.rcu_timer_clock_prescaler_config||, CODE, READONLY, ALIGN=2

                  rcu_timer_clock_prescaler_config PROC
;;;712    */
;;;713    void rcu_timer_clock_prescaler_config(uint32_t timer_clock_prescaler)
000000  f06f7180          MVN      r1,#0x1000000
;;;714    {
;;;715        /* configure the TIMERSEL bit and select the TIMER clock prescaler */
;;;716        if(timer_clock_prescaler == RCU_TIMER_PSC_MUL2) {
000004  4288              CMP      r0,r1
000006  d105              BNE      |L45.20|
;;;717            RCU_CFG1 &= timer_clock_prescaler;
000008  4905              LDR      r1,|L45.32|
00000a  6809              LDR      r1,[r1,#0]
00000c  4001              ANDS     r1,r1,r0
00000e  4a04              LDR      r2,|L45.32|
000010  6011              STR      r1,[r2,#0]
000012  e004              B        |L45.30|
                  |L45.20|
;;;718        } else {
;;;719            RCU_CFG1 |= timer_clock_prescaler;
000014  4902              LDR      r1,|L45.32|
000016  6809              LDR      r1,[r1,#0]
000018  4301              ORRS     r1,r1,r0
00001a  4a01              LDR      r2,|L45.32|
00001c  6011              STR      r1,[r2,#0]
                  |L45.30|
;;;720        }
;;;721    }
00001e  4770              BX       lr
;;;722    
                          ENDP

                  |L45.32|
                          DCD      0x4002388c

                          AREA ||i.rcu_tli_clock_div_config||, CODE, READONLY, ALIGN=2

                  rcu_tli_clock_div_config PROC
;;;730    */
;;;731    void rcu_tli_clock_div_config(uint32_t pllsai_r_div)
000000  4a04              LDR      r2,|L46.20|
;;;732    {
;;;733        uint32_t reg;
;;;734    
;;;735        reg = RCU_CFG1;
000002  6811              LDR      r1,[r2,#0]
;;;736        /* reset the PLLSAIRDIV bit and set according to pllsai_r_div */
;;;737        reg &= ~RCU_CFG1_PLLSAIRDIV;
000004  f4213140          BIC      r1,r1,#0x30000
;;;738        RCU_CFG1 = (reg | pllsai_r_div);
000008  ea410200          ORR      r2,r1,r0
00000c  4b01              LDR      r3,|L46.20|
00000e  601a              STR      r2,[r3,#0]
;;;739    }
000010  4770              BX       lr
;;;740    
                          ENDP

000012  0000              DCW      0x0000
                  |L46.20|
                          DCD      0x4002388c

                          AREA ||i.rcu_voltage_key_unlock||, CODE, READONLY, ALIGN=2

                  rcu_voltage_key_unlock PROC
;;;1180   */
;;;1181   void rcu_voltage_key_unlock(void)
000000  4801              LDR      r0,|L47.8|
;;;1182   {
;;;1183       RCU_VKEY = RCU_VKEY_UNLOCK;
000002  4902              LDR      r1,|L47.12|
000004  6008              STR      r0,[r1,#0]
;;;1184   }
000006  4770              BX       lr
;;;1185   
                          ENDP

                  |L47.8|
                          DCD      0x1a2b3c4d
                  |L47.12|
                          DCD      0x40023900

;*** Start embedded assembler ***

#line 1 "..\\Firmware\\GD32F4xx_standard_peripheral\\Source\\gd32f4xx_rcu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f4xx_rcu_c_60720801____REV16|
#line 114 "..\\Firmware\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f4xx_rcu_c_60720801____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f4xx_rcu_c_60720801____REVSH|
#line 128
|__asm___14_gd32f4xx_rcu_c_60720801____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
